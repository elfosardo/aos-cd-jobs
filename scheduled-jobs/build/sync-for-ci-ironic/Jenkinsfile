properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')),
    disableConcurrentBuilds(),
    disableResume(),
])

@NonCPS
def sortedVersions() {
  return commonlib.ocp4Versions.sort(false)
}

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib
    baseDir = "${env.WORKSPACE}/ci-ironic"

    S3_MIRROR_SYNC_DIR = "/enterprise/reposync/ci-ironic"

    for ( String version : sortedVersions() ) {

        openshift_group = "openshift-${version}"
        plashet_arch_args = ""
        def arches = buildlib.branch_arches(openshift_group)
        for ( String arch : arches ) {
            plashet_arch_args += "--arch ${arch} unsigned "
        }
        // for 4.12+ ironic is based on rhel 9 tag
        rhel_version = version.split("\\.")[1].toInteger() >= 12 ? 9 : 8

        /**
         * Build a plashet in a local directory under the WORKSPACE ${baseDir}/${plashetDirName} .
         * The plashets are unsigned as this is just for testing by Ironic's CI systems.
         */
        prevalidation_tag_name = "rhaos-${version}-rhel-${rhel_version}-ironic-prevalidation"
            if version >= 4.12:
                prevalidation_tag_name = "rhaos-${version}-ironic-rhel-${rhel_version}-prevalidation"
        embargoed_tag_name = "rhaos-${version}-rhel-${rhel_version}-embargoed"
        plashetDirName = prevalidation_tag_name
        commonlib.shell("rm -rf ${baseDir}/${plashetDirName}") // in case anything is left from the last run
        def doozerOpts = "--working-dir=${env.WORKSPACE}/doozer_working --group=${openshift_group}"
        buildlib.doozer([
                doozerOpts,
                "config:plashet",
                "--base-dir ${baseDir}",  // Directory in which to create the yum repo
                "--name ${plashetDirName}",  // The name of the directory to create within baseDir to contain the arch repos.
                "--repo-subdir os",  // This is just to be compatible with legacy doozer puddle layouts which had {arch}/os.
                plashet_arch_args,
                "from-tags", // plashet mode of operation => build from brew tags
                "--brew-tag ${prevalidation_tag_name} NOT_APPLICABLE",  // product name is not required since we aren't signing
                "--embargoed-brew-tag ${embargoed_tag_name}",
                "--inherit",
                "--include-previous", // enable both pinning and non-pinning for pre-validation
        ].join(' '))

        echo "Synchronizing plashet for ${prevalidation_tag_name}"

        commonlib.syncRepoToS3Mirror("${baseDir}/${plashetDirName}/", "${S3_MIRROR_SYNC_DIR}/${plashetDirName}/")
    }

    buildlib.cleanWorkspace()
}
